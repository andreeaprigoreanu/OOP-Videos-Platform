Andreea Prigoreanu
321CA

# Link repo git
    https://github.com/andreeaprigoreanu/OOP-tema1.git

# Clasele adaugate de mine se alfa in pachetele:
    * action - cuprinde clasele
        - Command
        - Query - cu clasele interne
            - ActorsQuery
            - VideosQuery
            - UsersQuery
        - Recommendation - cu clasele interne
            - Standard
            - Premium
    * actor - cuprinde clasa Actor
    * database - cuprinde clasele de tip Singleton
        - ActorsDatabase: contine lista de actori
        - UsersDatabase: stocheaza toti users
        - VideosDatabase: stocheaza toate videorile
    * entertainment - cuprinde clasele
        - Video (clasa abstracta)
        - Movie (extinde Video)
        - Serial (extinde Vide)
        - GenresList: contine o lista cu toate genurile posibile
    * user:
        - User

# Implementarile comenzilor:
    * favorite:
        - metoda addFavorite din clasa UsersDatabase apeleaza metoda addFavorite din clasa User,
        care verifica daca videoul a fost vizionat si daca el exista deja in lista de favorie.
        - daca nu, videoul este adaugat in lista de videouri favorite si se incrementeaza campul
        numFavorites al videoului

    * view:
        - metoda addView din clasa UsersDatabase apeleaza metoda addView din clasa User,
        care verifica daca videoul a fost deja vizionat.
        - daca da, atunci se face un update la entry
        - altfel, se adauga un entry in istoricul userului
        - se face un update la campul numView al videoului

    * rate:
        - metoda addRating din clasa UsersDatabase apeleaza metoda addRating din clasa User,
        care verifica daca videoul se gaseste in istoricul userului
        - daca se gaseste, atunci se verifica daca userul a mai dat rating aceluiasi video si daca
        nu, se adauga un entry in lista cu ratinguri a userului si se face un update ratingului
        mediu al acelui video

# Implementarile queriurilor:
    * Pentru fiecare query, imi creez o lista noua cu obiecte corespunzatoare tipului de query
    * Pentru a sorta fiecare lista creez un stream pe care aplic un filtrele necesare, sortez
    cu un comparator corespunzator si, la final, convertesc inapoi la o lista

# Implementarile recomandarilor:
    * Am separat recomandarile in recomandari pentru useri standard si recomandari pentru useri
    premium
    * Pentru fiecare tip de recomandare exista o metoda corespunzatoare in clasa UsersDatabase
    care returneaza rezultatul
    * Metodele pastreaza in linii mari aceeasi structura, in afara de popular, care utilizeaza
    clasa GenreList pentru a genera o lista cu toate genurile sortate dupa popularitate. Se
    itereaza in lista cu genres sortata si in lista cu videouri pentru a gasi primul video de
    un anumit genre care nu a fost vazut de user
    * Pentru restul recomandarilor se creeaza un stream pe care se aplica filtre si un comparator
    corespunzator si care, la final, se converteste in lista
